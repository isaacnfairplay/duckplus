name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

concurrency:
  group: release-docs-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build release distributions
        run: |
          python -m pip install --upgrade pip --trusted-host pypi.org --trusted-host files.pythonhosted.org
          python -m pip install build --trusted-host pypi.org --trusted-host files.pythonhosted.org
          python -m build

      - name: Upload distributions (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  docs:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    outputs:
      base_url: ${{ steps.configure.outputs.base_url }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up uv
        uses: astral-sh/setup-uv@v3

      - name: Sync project environment
        run: uv sync

      - name: Build documentation
        run: uv run sphinx-build -b html docs/source docs/_build/html

      - name: Checkout published site
        id: fetch-pages
        continue-on-error: true
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: docs/_site

      - name: Ensure site directory
        run: |
          if [ "${{ steps.fetch-pages.outcome }}" = "failure" ]; then
            rm -rf docs/_site
          fi
          mkdir -p docs/_site

      - name: Prepare versioned documentation
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          set -euo pipefail
          version="${RELEASE_TAG#v}"
          if [ -z "$version" ]; then
            echo "Release tag missing; cannot version documentation." >&2
            exit 1
          fi
          site_root="docs/_site"
          rm -rf "$site_root/$version"
          mkdir -p "$site_root/$version"
          rsync -a docs/_build/html/ "$site_root/$version/"
          rm -rf "$site_root/latest"
          cp -a "$site_root/$version" "$site_root/latest"
          python - <<'PY'
          from __future__ import annotations

          import json
          import pathlib

          site = pathlib.Path("docs/_site")
          versions = sorted(
              [entry.name for entry in site.iterdir() if entry.is_dir() and entry.name != "latest"],
              reverse=True,
          )
          (site / "versions.json").write_text(json.dumps({"versions": versions}, indent=2) + "\n")
          index = ["<h1>Duck+ documentation versions</h1>", "<ul>"]
          index.append('<li><a href="latest/index.html">latest</a></li>')
          for version in versions:
              index.append(f'<li><a href="{version}/index.html">{version}</a></li>')
          index.append("</ul>")
          (site / "index.html").write_text("\n".join(index) + "\n")
          PY

      - name: Configure GitHub Pages
        id: configure
        uses: actions/configure-pages@v4

      - name: Upload documentation artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_site

  pypi-publish:
    runs-on: ubuntu-latest
    needs: [release-build]
    permissions:
      id-token: write   # required for OIDC trusted publishing
      contents: read
    environment:
      name: pypi

    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Verify release tag == package version (from dist)
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          python - <<'PY'
          import os, sys, glob, zipfile, tarfile, re
          tag = os.environ.get("RELEASE_TAG","").lstrip("v")
          dists = glob.glob("dist/*.whl") + glob.glob("dist/*.tar.gz")
          if not dists:
              print("No distribution files found in dist/")
              sys.exit(1)

          def version_from_wheel(path):
              with zipfile.ZipFile(path) as z:
                  metas = [n for n in z.namelist() if n.endswith("METADATA") and ".dist-info/" in n]
                  if not metas: return None
                  data = z.read(metas[0]).decode("utf-8", "replace")
                  m = re.search(r"^Version:\s*(.+)$", data, re.M)
                  return m.group(1).strip() if m else None

          def version_from_sdist(path):
              with tarfile.open(path, "r:gz") as t:
                  members = [m for m in t.getmembers() if m.name.endswith("PKG-INFO")]
                  if not members: return None
                  data = t.extractfile(members[0]).read().decode("utf-8","replace")
                  m = re.search(r"^Version:\s*(.+)$", data, re.M)
                  return m.group(1).strip() if m else None

          ver = None
          for f in dists:
              if f.endswith(".whl"):
                  ver = version_from_wheel(f)
                  if ver: break
          if not ver:
              for f in dists:
                  if f.endswith(".tar.gz"):
                      ver = version_from_sdist(f)
                      if ver: break

          if not ver:
              print("Could not determine version from wheel or sdist metadata")
              sys.exit(1)

          print(f"Release tag: {tag}; Dist version: {ver}")
          if tag != ver:
              print(f"Error: release tag ({tag}) != distribution version ({ver})")
              sys.exit(1)
          PY

      - name: Publish to PyPI (OIDC trusted publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  deploy-docs:
    runs-on: ubuntu-latest
    needs: docs
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Publish deployment summary
        env:
          PAGE_URL: ${{ steps.deployment.outputs.page_url }}
          BASE_URL: ${{ needs.docs.outputs.base_url }}
          EVENT_NAME: ${{ github.event_name }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          {
            echo "### Documentation site";
            echo "";
            if [ -n "$PAGE_URL" ]; then
              echo "- 🚀 Released docs (${RELEASE_TAG}): [$PAGE_URL]($PAGE_URL)";
              echo "- 🔁 Latest docs: [$PAGE_URL/latest/]($PAGE_URL/latest/)";
            fi
            if [ -n "$BASE_URL" ] && [ "$BASE_URL" != "$PAGE_URL" ]; then
              echo "- ℹ️ Base URL: [$BASE_URL]($BASE_URL)";
            fi
          } >> "$GITHUB_STEP_SUMMARY"
