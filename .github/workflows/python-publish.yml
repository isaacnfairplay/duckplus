name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build release distributions
        run: |
          python -m pip install --upgrade pip --trusted-host pypi.org --trusted-host files.pythonhosted.org
          python -m pip install build --trusted-host pypi.org --trusted-host files.pythonhosted.org
          python -m build

      - name: Upload distributions (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs: [release-build]
    permissions:
      id-token: write   # required for OIDC trusted publishing
      contents: read
    environment:
      name: pypi

    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Verify release tag == package version (from dist)
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          python - <<'PY'
          import os, sys, glob, zipfile, tarfile, re
          tag = os.environ.get("RELEASE_TAG","").lstrip("v")
          dists = glob.glob("dist/*.whl") + glob.glob("dist/*.tar.gz")
          if not dists:
              print("No distribution files found in dist/")
              sys.exit(1)

          def version_from_wheel(path):
              with zipfile.ZipFile(path) as z:
                  metas = [n for n in z.namelist() if n.endswith("METADATA") and ".dist-info/" in n]
                  if not metas: return None
                  data = z.read(metas[0]).decode("utf-8", "replace")
                  m = re.search(r"^Version:\s*(.+)$", data, re.M)
                  return m.group(1).strip() if m else None

          def version_from_sdist(path):
              with tarfile.open(path, "r:gz") as t:
                  members = [m for m in t.getmembers() if m.name.endswith("PKG-INFO")]
                  if not members: return None
                  data = t.extractfile(members[0]).read().decode("utf-8","replace")
                  m = re.search(r"^Version:\s*(.+)$", data, re.M)
                  return m.group(1).strip() if m else None

          ver = None
          for f in dists:
              if f.endswith(".whl"):
                  ver = version_from_wheel(f)
                  if ver: break
          if not ver:
              for f in dists:
                  if f.endswith(".tar.gz"):
                      ver = version_from_sdist(f)
                      if ver: break

          if not ver:
              print("Could not determine version from wheel or sdist metadata")
              sys.exit(1)

          print(f"Release tag: {tag}; Dist version: {ver}")
          if tag != ver:
              print(f"Error: release tag ({tag}) != distribution version ({ver})")
              sys.exit(1)
          PY

      - name: Publish to PyPI (OIDC trusted publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
