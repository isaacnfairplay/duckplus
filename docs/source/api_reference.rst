.. _duckplus_api_reference:

Duck+ API Reference
===================

Duck+ exposes a small, opinionated surface area that wraps DuckDB with typed,
immutable relational helpers and explicit mutation primitives. This reference
summarizes the public API exported from ``duckplus.__all__`` and explains how the
pieces fit together.

The sections below combine curated guidance with autogenerated member listings.
Use the narrative to understand when to reach for each helper and drill into the
autodoc tables to inspect the full callable signatures.

.. contents:: Quick navigation
   :local:
   :depth: 2

.. currentmodule:: duckplus

.. _connection-management-duckplusconnect:

Connection management (``duckplus.connect``)
--------------------------------------------

``duckplus.connect`` provides the core connection wrapper and adapters that keep
DuckDB interactions predictable across environments. The helpers mirror DuckDB's
APIs while enforcing identifier validation and immutable relational workflows.

.. currentmodule:: duckplus.connect

.. autosummary::
   :nosignatures:

   connect
   DuckConnection
   load_extensions
   attach_nanodbc
   query_nanodbc

.. automodule:: duckplus.connect
   :members:
   :member-order: bysource
   :noindex:

.. _odbc-strategies-duckplusodbc:

ODBC strategies (``duckplus.odbc``)
-----------------------------------

Duck+ offers a small strategy framework for managing ODBC connection strings in
concert with :class:`duckplus.secrets.SecretManager`. Each strategy produces a
:class:`duckplus.secrets.SecretDefinition` via :meth:`~duckplus.odbc.BaseODBCStrategy.definition`
or persists credentials directly with the manager through
:meth:`~duckplus.odbc.BaseODBCStrategy.register`. When the secret exists in the
registry the strategy can reconstruct the full ODBC connection string with
:meth:`~duckplus.odbc.BaseODBCStrategy.connection_string`, allowing helpers such
as :func:`duckplus.connect.attach_nanodbc` to consume the resolved value.

.. currentmodule:: duckplus.odbc

.. autosummary::
   :nosignatures:

   AccessStrategy
   CustomODBCStrategy
   DuckDBDsnStrategy
   ExcelStrategy
   IBMiAccessStrategy
   MySQLStrategy
   PostgresStrategy
   SQLServerStrategy

.. automodule:: duckplus.odbc
   :members:
   :member-order: bysource
   :noindex:

.. _relational-transformations-duckpluscore:

Relational transformations (``duckplus.core``)
----------------------------------------------

``duckplus.core`` implements immutable relational pipelines that defer execution
until explicitly materialized. Each helper returns a new :class:`DuckRel`,
keeping transformations composable and type-aware while mirroring DuckDB's SQL
semantics.

.. currentmodule:: duckplus.core

.. autosummary::
   :nosignatures:

   DuckRel
   AsofSpec
   JoinSpec
   FilterExpression
   col

.. automodule:: duckplus.core
   :members:
   :member-order: bysource
   :noindex:

.. currentmodule:: duckplus.duckrel

.. automodule:: duckplus.duckrel
   :members:
   :member-order: bysource
   :noindex:

Mutable table helpers (``duckplus.table``)
-------------------------------------------

``duckplus.table`` introduces ``DuckTable`` for mutation-oriented operations that
complement the immutable ``DuckRel`` pipeline.

.. currentmodule:: duckplus.table

.. autosummary::
   :nosignatures:

   DuckTable

.. automodule:: duckplus.table
   :members:
   :member-order: bysource
   :noindex:

Data ingestion (``duckplus.io``)
--------------------------------

``duckplus.io`` centralizes filesystem and cloud ingestion patterns so
``DuckConnection`` helpers can standardize validation and relation wrapping.

.. currentmodule:: duckplus.io

.. autosummary::
   :nosignatures:

   read_csv
   read_json
   read_parquet

.. automodule:: duckplus.io
   :members:
   :member-order: bysource
   :noindex:

Materialization strategies (``duckplus.materialize``)
-----------------------------------------------------

``duckplus.materialize`` exposes adapters that turn ``DuckRel`` pipelines into
Arrow tables, pandas DataFrames, or other consumable outputs.

.. currentmodule:: duckplus.materialize

.. autosummary::
   :nosignatures:

   MaterializeStrategy
   ArrowMaterializeStrategy
   ParquetMaterializeStrategy
   Materialized

.. automodule:: duckplus.materialize
   :members:
   :member-order: bysource
   :noindex:

.. _duckplus-secrets:

Secrets management (``duckplus.secrets``)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Secrets helpers integrate with DuckDB's ``secrets`` extension while maintaining a
Python-first registry for configuration storage. Use
:class:`duckplus.secrets.SecretDefinition` to declare the structure of a secret
and :class:`duckplus.secrets.SecretManager` to manage lifecycle operations.

.. currentmodule:: duckplus.secrets

.. autosummary::
   :nosignatures:

   SecretDefinition
   SecretManager

.. automodule:: duckplus.secrets
   :members:
   :member-order: bysource
   :noindex:

.. _duckplus-html:

HTML preview (``duckplus.html``)
--------------------------------

``duckplus.html`` exposes an HTML renderer for quick previews of
``DuckRel``-backed datasets. Column casing, escaping, and truncation messaging
mirror DuckDB defaults to keep expectations aligned.

.. currentmodule:: duckplus.html

.. autosummary::
   :nosignatures:

   to_html

.. automodule:: duckplus.html
   :members:
   :member-order: bysource
   :noindex:

.. _duckplus-cli:

Command line interface (``duckplus.cli``)
-----------------------------------------

``duckplus.cli`` powers the project CLI entry point. The helpers surface a
read-only SQL runner, schema inspection, and an optional REPL while reusing the
core connection primitives documented above.

.. currentmodule:: duckplus.cli

.. autosummary::
   :nosignatures:

   main
   repl

.. automodule:: duckplus.cli
   :members:
   :member-order: bysource
   :noindex:

.. currentmodule:: duckplus.util

Utility helpers (``duckplus.util``)
------------------------------------

``duckplus.util`` centralizes identifier validation, column resolution, and SQL
literal formatting that underpin the higher-level API surface.

.. autosummary::
   :nosignatures:

   ensure_identifier
   normalize_columns
   format_sql_literal

.. automodule:: duckplus.util
   :members:
   :member-order: bysource
   :noindex:

.. currentmodule:: duckplus

.. _public-namespace:

Public namespace
----------------

Importing from ``duckplus`` provides all of the classes and helpers documented
above through the module's ``__all__`` definition, making ``from duckplus import
DuckRel, DuckTable, connect`` the canonical entry point for most applications.

.. automodule:: duckplus
   :members:
   :member-order: bysource
   :noindex:

.. currentmodule:: duckplus

.. _demo-walkthroughs:

Demo walkthroughs
-----------------

The following lightweight walkthroughs combine the primitives above so teams can
visualize how the API reference maps onto everyday tasks without relying on any
additional helpers.

Demo: Build a transformation pipeline
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This example chains a handful of ``DuckRel`` helpers to prepare a transformed
view before materializing it for downstream use.

.. code-block:: python

   from pathlib import Path

   from duckplus import connect

   with connect() as conn:
       # Load two datasets from disk into immutable DuckRel wrappers.
       staging = conn.read_parquet([Path("/data/staging_orders.parquet")])
       reference = conn.read_csv([Path("/data/customer_lookup.csv")])

       enriched = (
           staging
           # Cast total to a DECIMAL column for downstream precision.
           .cast_columns(total="DECIMAL(18,2)")
           # Join on shared customer_id while tolerating extra right-side columns.
           .natural_left(reference, allow_collisions=True)
           # Filter to shipped orders in the current quarter.
           .filter("status = ? AND ship_date >= ?", "SHIPPED", "2024-01-01")
           .order_by(order_id="asc")
           .limit(1000)
       )

       # Spill the relation to an Arrow table for analytics clients.
       arrow_snapshot = enriched.materialize().require_table()

- ``DuckConnection.read_parquet`` and ``DuckConnection.read_csv`` validate paths
  and wrap the resulting relations in ``DuckRel`` for further
  composition.【F:src/duckplus/connect.py†L85-L143】【F:src/duckplus/io.py†L680-L812】
- ``cast_columns``, ``natural_left``, ``filter``, ``order_by``, and ``limit`` each
  return a new ``DuckRel``, ensuring the pipeline stays immutable and
  case-aware.【F:src/duckplus/core.py†L533-L807】
- ``materialize()`` defaults to the Arrow strategy and ensures the resulting
  table can be reused without mutating the original
  relation.【F:src/duckplus/core.py†L844-L904】【F:src/duckplus/materialize.py†L21-L55】

Demo: Append only unseen rows into a fact table
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Mutable table helpers complement the immutable pipeline by enforcing explicit
ingestion semantics.

.. code-block:: python

   from duckplus import DuckTable, connect

   with connect("warehouse.duckdb") as conn:
       fact_orders = DuckTable(conn, "analytics.fact_orders")
       staging = conn.read_parquet([Path("/loads/fact_orders_delta.parquet")])

       inserted = fact_orders.insert_antijoin(staging, keys=["order_id"])
       print(f"Inserted {inserted} new rows")

- ``DuckTable`` validates the dotted identifier without changing casing, keeping
  schema ownership explicit.【F:src/duckplus/table.py†L1-L76】
- ``insert_antijoin`` performs a case-aware anti join using the provided keys and
  returns the number of appended rows for
  observability.【F:src/duckplus/table.py†L113-L194】
- ``DuckConnection.read_parquet`` mirrors the same path validation behaviour
  shown earlier, so ingestion always flows through typed
  helpers.【F:src/duckplus/connect.py†L85-L106】【F:src/duckplus/io.py†L680-L787】

Demo: Provision and sync connection secrets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Secrets management is designed to be connection-aware without relying on global
state.

.. code-block:: python

   from duckplus import SecretDefinition, SecretManager, connect

   with connect() as conn:
       manager = SecretManager(conn)
       definition = SecretDefinition(
           name="GCS_BACKUP",
           engine="gcs",
           parameters={"project_id": "analytics-prod", "key_file": "/secrets/key.json"},
       )

       manager.create_secret(definition, replace=True)
       manager.sync()  # Mirrors cached secrets into the DuckDB connection.

- ``SecretDefinition.normalized()`` guarantees safe identifier casing before the
  secret ever reaches DuckDB.【F:src/duckplus/secrets.py†L1-L74】
- ``SecretManager`` coordinates registry storage with optional extension loading
  and exposes ``create_secret``/``sync`` helpers for deterministic
  mirroring.【F:src/duckplus/secrets.py†L138-L264】
